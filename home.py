import streamlit as st
from PIL import Image
from engine import RestaurantSelector, CardRecommender

def get_card_data():
    return [
        {
            "name": "Thong Grill Hide & Yakiniku",
            "category": "‡∏ä‡∏≤‡∏ö‡∏π/‡∏™‡∏∏‡∏Å‡∏µ‡πâ‡∏¢‡∏≤‡∏Å‡∏µ‡πâ/‡∏´‡∏°‡πâ‡∏≠‡πÑ‡∏ü",
            "rating": 4.8,
            "reviews": 5,
            "image_url": "https://img.wongnai.com/p/624x0/2025/03/28/7b4e368494c94cee80dfc99f0a7704dc.jpg",
            "description": "‡πÄ‡∏õ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á 23:30 | ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏î‡∏£‡∏ñ | ‡πÄ‡∏î‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡∏µ"
        },
        {
            "name": "Burger King",
            "category": "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏≠‡∏£‡πå",
            "rating": 4.4,
            "reviews": 10,
            "image_url": "https://img.wongnai.com/p/624x0/2025/04/11/e6b18c24a9914034b14666aba59ecdfd.jpg",
            "description": "‡∏ü‡∏≤‡∏™‡∏ï‡πå‡∏ü‡∏π‡πâ‡∏î‡πÉ‡∏ô‡∏ï‡∏≥‡∏ô‡∏≤‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏õ‡∏£‡∏ï‡∏•‡∏≠‡∏î‡∏õ‡∏µ"
        },
        {
            "name": "Starbucks River City",
            "category": "‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü/‡∏ä‡∏≤",
            "rating": 4.6,
            "reviews": 14,
            "image_url": "https://img.wongnai.com/p/624x0/2024/04/17/1e4ec5eae8ad4e2cbcb79fd2753e16f9.jpg",
            "description": "‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü‡∏ß‡∏¥‡∏ß‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤"
        },
        {
            "name": "MOS BURGER",
            "category": "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏≠‡∏£‡πå",
            "rating": 4.5,
            "reviews": 13,
            "image_url": "https://img.wongnai.com/p/624x0/2024/09/10/44f2586e3bd84950b34fd074b82e7a85.jpg",
            "description": "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô‡πÅ‡∏ó‡πâ ‡πÜ ‡∏à‡∏≤‡∏Å‡πÇ‡∏ï‡πÄ‡∏Å‡∏µ‡∏¢‡∏ß"
        }
    ]

def show_home():
    st.markdown("""
        <style>
        .card-title { font-weight: bold; font-size: 16px; margin-top: 10px; }
        .card-category { font-size: 13px; color: #666; margin-bottom: 4px; }
        .card-rating { font-size: 13px; color: #333; margin: 4px 0; }
        .rating-badge { background-color: #d93025; color: white; font-weight: bold; padding: 2px 6px; border-radius: 12px; font-size: 12px; }
        .card-box { background: white; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.05); padding: 12px; height: 100%; display: flex; flex-direction: column; justify-content: space-between; }
        </style>
    """, unsafe_allow_html=True)

    col1, col2, col3 = st.columns((1, 0.5, 1))
    with col2:
        st.image(Image.open("logo.png"), width=100)

    restaurant_selector = RestaurantSelector()
    card_recommender = CardRecommender()

    if "selected_restaurant" not in st.session_state:
        st.session_state["selected_restaurant"] = None
    if "search_query" not in st.session_state:
        st.session_state["search_query"] = ""

    st.subheader("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£")
    search_query = st.text_input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πà‡∏∞", st.session_state["search_query"]).strip()
    all_restaurants = restaurant_selector.all_restaurants
    filtered_restaurants = all_restaurants if not search_query else [
        r for r in all_restaurants if search_query.lower() in r.lower()
    ]
    selected_restaurant = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£", ["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"] + filtered_restaurants)

    if selected_restaurant == "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£":
        st.subheader("‚≠ê ‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
        cards = get_card_data()

        for i in range(0, len(cards), 4):
            cols = st.columns(4)
            for j, r in enumerate(cards[i:i+4]):
                with cols[j]:
                    with st.container():
                        st.image(r['image_url'], use_container_width=True)
                        st.markdown(f"<div class='card-box'>", unsafe_allow_html=True)
                        st.markdown(f"<div class='card-title'>{r['name']}</div>", unsafe_allow_html=True)
                        st.markdown(f"<div class='card-category'>{r['category']}</div>", unsafe_allow_html=True)
                        st.markdown(f"<div class='card-rating'><span class='rating-badge'>{r['rating']} ‚≠ê</span> {r['reviews']} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß</div>", unsafe_allow_html=True)
                        st.markdown("</div>", unsafe_allow_html=True)
                        if st.button("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", key=f"card_{i+j}"):
                            st.session_state.page = "detail"
                            st.session_state.restaurant_detail = r
                            st.rerun()

    if selected_restaurant and selected_restaurant != "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£":
        st.session_state["selected_restaurant"] = selected_restaurant
        st.session_state["search_query"] = search_query
        st.success(f"‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô {selected_restaurant}")

        st.subheader(f"üí≥ ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {selected_restaurant}")
        recommended_card = card_recommender.recommend_cards(selected_restaurant)

        if recommended_card:
            st.markdown(f"""
<div class="card">
    <div class="card-body">
        <h4>üéâ {recommended_card.card_name} ({recommended_card.bank})</h4>
        <ul>
            <li>üí∞ <b>Cashback</b>: {recommended_card.cashback}%</li>
            <li>üéÅ <b>Rewards</b>: {recommended_card.rewards} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/100 ‡∏ö‡∏≤‡∏ó</li>
            <li>üçΩÔ∏è <b>Dining Discount</b>: {recommended_card.dining_discount}%</li>
            <li>‚úàÔ∏è <b>Travel Benefits</b>: {recommended_card.travel_benefit}</li>
        </ul>
    </div>
</div>
""", unsafe_allow_html=True)
        else:
            st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ")

    if st.button("üîÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"):
        st.session_state["selected_restaurant"] = None
        st.session_state["search_query"] = ""
        st.rerun()
