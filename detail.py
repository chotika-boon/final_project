import streamlit as st
import pandas as pd
import json
from openai import OpenAI

CSV_FILE = "user_data.csv"
PROMO_FILE = "CoolKid_promotion_creditcard - Sheet2.csv"

def render_cards_by_group(title, card_data):
    st.markdown(f"### {title}")
    st.markdown("""
    <style>
    .card-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 16px;
        margin-top: 10px;
    }
    .promo-card {
        background: white;
        border-radius: 12px;
        padding: 16px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        transition: all 0.2s ease;
    }
    .promo-card:hover {
        transform: translateY(-4px);
    }
    .badge {
        background-color: #f0f0f0;
        color: #333;
        padding: 4px 10px;
        border-radius: 12px;
        font-size: 12px;
        display: inline-block;
        margin-bottom: 8px;
    }
    .store-name {
        font-weight: 700;
        font-size: 18px;
    }
    .benefit {
        margin: 8px 0;
    }
    .date {
        font-size: 13px;
        color: #777;
        margin-bottom: 10px;
    }
    .detail-link {
        font-weight: 600;
        color: #000;
    }
    </style>
    <div class="card-row">
    """, unsafe_allow_html=True)

    for card in card_data:
        st.markdown(f"""
        <div class="promo-card">
            <div class="store-name">{card['‡∏£‡πâ‡∏≤‡∏ô']}</div>
            <div class="badge">{card.get('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}</div>
            <div class="benefit">‚Ä¢ {card['‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå']}</div>
            <div class="date">{card.get('‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà')}</div>
            <div class="detail-link">‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‚ûù</div>
        </div>
        """, unsafe_allow_html=True)

    st.markdown("</div>", unsafe_allow_html=True)

def show_detail():
    r = st.session_state.get("restaurant_detail")
    if not r:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        return

    st.image(r["image_url"], width=300)
    st.title(r["name"])
    st.markdown(f"‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {r['category']}")
    st.markdown(f"‚≠ê {r['rating']} ({r['reviews']} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß)")
    st.markdown(r.get("description", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"))

    user_cards = []
    if st.session_state.get("username"):
        st.markdown(f"**‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:** {st.session_state.username}")
        st.markdown(f"**‡∏≠‡∏µ‡πÄ‡∏°‡∏•:** {st.session_state.get('logged_in_email', '-')}")
    else:
        st.warning("‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")

    try:
        df = pd.read_csv(CSV_FILE)
        current_user = df[df['email'] == st.session_state.get("logged_in_email")]
        if not current_user.empty:
            user_row = current_user.iloc[-1]
            st.markdown(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£:** {user_row['card_count']}")
            if 'cards' in user_row:
                user_cards = user_row['cards'].split(",")
    except Exception as e:
        st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return

    st.divider()
    st.subheader("üéÅ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πà‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

    try:
        promo_df = pd.read_csv(PROMO_FILE)
        promo_df.rename(columns={promo_df.columns[5]: "Link"}, inplace=True)
        filtered = promo_df[promo_df["Store"].str.contains(r["name"], case=False, na=False)]

        if not filtered.empty:
            prompt = f'''
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï

‡∏£‡πâ‡∏≤‡∏ô: {r['name']}
‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£: {', '.join(user_cards)}

‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:
1. ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÑ‡∏´‡∏ô‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
2. ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÉ‡∏Ñ‡∏£ (‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß / ‡∏Å‡∏•‡∏∏‡πà‡∏°)
3. ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà
4. ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‚Äú‡∏Ñ‡∏∏‡πâ‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô 500 ‡∏ö‡∏≤‡∏ó‚Äù, ‚Äú‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏õ‡∏¥‡πâ‡∏á‡∏¢‡πà‡∏≤‡∏á‚Äù
5. ‡πÄ‡∏û‡∏¥‡πà‡∏° field "‡∏Å‡∏•‡∏∏‡πà‡∏°" ‡πÄ‡∏õ‡πá‡∏ô ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞ üí≥ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ

‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
[
  {{
    "‡∏£‡πâ‡∏≤‡∏ô": "Bar B Q Plaza",
    "‡∏ö‡∏±‡∏ï‡∏£": "KTC Platinum",
    "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": "‡∏õ‡∏¥‡πâ‡∏á‡∏¢‡πà‡∏≤‡∏á",
    "‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå": "‡∏•‡∏î 80 ‡∏ö‡∏≤‡∏ó ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ 699 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
    "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥": 699,
    "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö": "‡∏Å‡∏•‡∏∏‡πà‡∏°",
    "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥": "‡∏Ñ‡∏∏‡πâ‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏¢‡∏≠‡∏∞",
    "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤": "1 ‡∏°‡∏µ.‡∏Ñ. 68 - 31 ‡∏™.‡∏Ñ. 68",
    "‡∏Å‡∏•‡∏∏‡πà‡∏°": "‚úÖ"
  }}
]

‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô:
{filtered[['Store', 'Card_name', 'Benefit_detail', 'Date']].to_csv(index=False)}
'''

            client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
            with st.spinner("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ AI..."):
                response = client.chat.completions.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.2
                )
                result = response.choices[0].message.content
                try:
                    parsed = json.loads(result)
                    user_has = [p for p in parsed if p["‡∏Å‡∏•‡∏∏‡πà‡∏°"] == "‚úÖ"]
                    user_not_have = [p for p in parsed if p["‡∏Å‡∏•‡∏∏‡πà‡∏°"] == "üí≥"]

                    render_cards_by_group("‚úÖ ‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ", user_has)
                    render_cards_by_group("üí≥ ‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ", user_not_have)

                except Exception as e:
                    st.error("‚ö†Ô∏è JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                    st.code(result)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ")
    except Exception as e:
        st.error(f"‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

    if st.button("üîô ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"):
        st.session_state.page = "home"
        st.rerun()
