import streamlit as st
import pandas as pd
import json
from openai import OpenAI

CSV_FILE = "user_data.csv"
PROMO_FILE = "CoolKid_promotion_creditcard - Sheet2.csv"

def show_detail():
    r = st.session_state.get("restaurant_detail")
    if not r:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        return

    st.markdown("""
        <style>
        .detail-header {
            display: flex;
            gap: 20px;
            align-items: flex-start;
        }
        .detail-image {
            flex: 1;
        }
        .detail-info {
            flex: 2;
        }
        .badge {
            background-color: #e3e3e3;
            border-radius: 6px;
            padding: 4px 10px;
            font-size: 13px;
            margin-right: 6px;
            display: inline-block;
        }
        .card-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .card {
            background: white;
            border-radius: 12px;
            padding: 16px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        </style>
    """, unsafe_allow_html=True)

    # Header
    st.markdown("<div class='detail-header'>", unsafe_allow_html=True)
    st.image(r["image_url"], width=300)
    st.markdown("<div class='detail-info'>", unsafe_allow_html=True)
    st.title(r["name"])
    st.markdown(f"<div class='badge'>{r['category']}</div>", unsafe_allow_html=True)
    st.markdown(f"<p>‚≠ê <b>{r['rating']}</b> ({r['reviews']} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß)</p>", unsafe_allow_html=True)
    st.markdown(f"<p>{r.get('description', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°')}</p>", unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

    st.divider()

    # User Info
    st.subheader("üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    if st.session_state.get("username"):
        st.markdown(f"**‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:** {st.session_state.username}")
        st.markdown(f"**‡∏≠‡∏µ‡πÄ‡∏°‡∏•:** {st.session_state.get('logged_in_email', '-')}")
    else:
        st.warning("‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")

    user_cards = []
    try:
        df = pd.read_csv(CSV_FILE)
        current_user = df[df['email'] == st.session_state.get("logged_in_email")]
        if not current_user.empty:
            user_row = current_user.iloc[-1]
            st.markdown(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£:** {user_row['card_count']}")
            user_cards = user_row['cards'].split(",") if 'cards' in user_row else []
        else:
            st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {e}")

    st.divider()

    # Promotions
    st.subheader("üéÅ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏£‡πà‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    try:
        promo_df = pd.read_csv(PROMO_FILE)
        promo_df.rename(columns={promo_df.columns[5]: "Link"}, inplace=True)
        filtered = promo_df[promo_df["Store"].str.contains(r["name"], case=False, na=False)]

        if not filtered.empty:
            st.dataframe(filtered[["Card_name", "Benefit_detail", "Date", "Link"]])

            # AI Prompt
            prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï

‡∏£‡πâ‡∏≤‡∏ô: {r['name']}
‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£: {', '.join(user_cards)}

‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:
1. ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÑ‡∏´‡∏ô‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
2. ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÉ‡∏Ñ‡∏£ (‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß / ‡∏Å‡∏•‡∏∏‡πà‡∏°)
3. ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà
4. ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‚Äú‡∏Ñ‡∏∏‡πâ‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô 500 ‡∏ö‡∏≤‡∏ó‚Äù, ‚Äú‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏õ‡∏¥‡πâ‡∏á‡∏¢‡πà‡∏≤‡∏á‚Äù

‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
[
  {{
    "‡∏£‡πâ‡∏≤‡∏ô": "Bar B Q Plaza",
    "‡∏ö‡∏±‡∏ï‡∏£": "KTC Platinum",
    "‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå": "‡∏•‡∏î 80 ‡∏ö‡∏≤‡∏ó ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ 699 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
    "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥": 699,
    "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö": "‡∏Å‡∏•‡∏∏‡πà‡∏°",
    "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥": "‡∏Ñ‡∏∏‡πâ‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏¢‡∏≠‡∏∞"
  }}
]

‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô:
{filtered[['Store', 'Card_name', 'Benefit_detail']].to_csv(index=False)}
"""

            # Call OpenAI
            client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
            with st.spinner("ü§ñ AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô..."):
                response = client.chat.completions.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.2
                )
                result = response.choices[0].message.content
                try:
                    parsed = json.loads(result)
                    st.markdown('<div class="card-grid">', unsafe_allow_html=True)
                    for item in parsed:
                        st.markdown(f"""
                        <div class="card">
                            <h4>{item['‡∏£‡πâ‡∏≤‡∏ô']}</h4>
                            <p><strong>‡∏ö‡∏±‡∏ï‡∏£:</strong> {item['‡∏ö‡∏±‡∏ï‡∏£']}</p>
                            <p><strong>‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå:</strong> {item['‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå']}</p>
                            <p><strong>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥:</strong> {item['‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥']} ‡∏ö‡∏≤‡∏ó</p>
                            <p><strong>‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö:</strong> {item['‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö']}</p>
                            <p><strong>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> {item['‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥']}</p>
                        </div>
                        """, unsafe_allow_html=True)
                    st.markdown("</div>", unsafe_allow_html=True)
                except:
                    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÑ‡∏î‡πâ ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡∏ô")
                    st.markdown(result)

        else:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÑ‡∏î‡πâ: {e}")

    if st.button("üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"):
        st.session_state.page = "home"
        st.rerun()
