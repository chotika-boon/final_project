import streamlit as st
import openai
import pandas as pd
import json

# ---------------------------
# CONFIG
# ---------------------------
openai.api_key = st.secrets["OPENAI_API_KEY"]

st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Thai:wght@300;400;600&display=swap');
html, body, div, p, h1, h2, h3, h4 {
    font-family: 'Noto Sans Thai', sans-serif !important;
}
.card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: 20px;
    margin-top: 20px;
}
.card {
    background: white;
    border-radius: 12px;
    padding: 16px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    height: 100%;
}
.tag {
    background-color: #eee;
    color: #333;
    padding: 4px 10px;
    border-radius: 8px;
    font-size: 13px;
    display: inline-block;
    margin-right: 6px;
    margin-bottom: 4px;
}
</style>
""", unsafe_allow_html=True)

# ---------------------------
# INPUT DATA (‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á)
# ---------------------------
r = {"name": "‡∏£‡∏ß‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏ö‡∏∏‡∏ü‡πÄ‡∏ü‡πà‡∏ï‡πå‡∏õ‡∏¥‡πâ‡∏á‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡∏≤‡∏ö‡∏π"}

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á DataFrame (filtered ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
filtered = pd.DataFrame([
    {"Card_name": "KTC Platinum", "Benefit_detail": "‡πÅ‡∏•‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ö‡∏∏‡∏ü‡πÄ‡∏ü‡πà‡∏ï‡πå 80 ‡∏ö‡∏≤‡∏ó/‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ 699 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô KTC"},
    {"Card_name": "KTC Signature", "Benefit_detail": "‡πÅ‡∏•‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ö‡∏∏‡∏ü‡πÄ‡∏ü‡πà‡∏ï‡πå 150 ‡∏ö‡∏≤‡∏ó/‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ 699 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô KTC"},
])

user_cards = ["KTC Platinum"]

# ---------------------------
# PROMPT ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ OpenAI
# ---------------------------
prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï

‡∏£‡πâ‡∏≤‡∏ô: {r['name']}

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:
{filtered[['Card_name', 'Benefit_detail']].to_csv(index=False)}

‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏ö‡∏±‡∏ï‡∏£‡∏î‡∏±‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
{', '.join(user_cards)}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡πà‡∏ß‡∏¢:
1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏à‡∏≤‡∏Å:
   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (amount)
   - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ (‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô)
   - ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ benefit ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏£‡∏¥‡∏á
   ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏õ‡πá‡∏ô:
   - ‚úÖ ‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ
   - üí≥ ‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ

2. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏±‡∏ï‡∏£ ‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
   - ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß / ‡∏Å‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
   - ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà
   - ‡∏Ñ‡∏∏‡πâ‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏á
   - ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÄ‡∏ä‡πà‡∏ô ‚Äú‡∏õ‡∏¥‡πâ‡∏á‡∏¢‡πà‡∏≤‡∏á‚Äù, ‚Äú‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‚Äù, ‚Äú‡∏Ñ‡∏∏‡πâ‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‚Äù

3. ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
[
  {{
    "‡∏£‡πâ‡∏≤‡∏ô": "‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô",
    "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": "‡∏õ‡∏¥‡πâ‡∏á‡∏¢‡πà‡∏≤‡∏á / ‡∏ä‡∏≤‡∏ö‡∏π",
    "benefit": "‡∏•‡∏î ...",
    "amount_min": 699,
    "‡∏Å‡∏•‡∏∏‡πà‡∏°": "‚úÖ ‡∏´‡∏£‡∏∑‡∏≠ üí≥",
    "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö": "‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß / ‡∏Å‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°",
    "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏¥‡πâ‡∏á‡∏¢‡πà‡∏≤‡∏á"
  }}
]
"""

# ---------------------------
# CALL OpenAI API
# ---------------------------
with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.2,
    )

# ---------------------------
# PARSE JSON RESPONSE
# ---------------------------
try:
    content = response['choices'][0]['message']['content']
    json_data = json.loads(content)
except Exception as e:
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å OpenAI ‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÑ‡∏î‡πâ")
    st.code(content)
    st.stop()

# ---------------------------
# DISPLAY UI
# ---------------------------
st.markdown("### üìã ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
st.markdown('<div class="card-grid">', unsafe_allow_html=True)

for item in json_data:
    st.markdown(f"""
    <div class="card">
        <h4>{item['‡∏£‡πâ‡∏≤‡∏ô']}</h4>
        <p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> {item.get('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', '-')}</p>
        <p><strong>‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå:</strong> {item['benefit']}</p>
        <p><strong>‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥:</strong> {item.get('amount_min', '-'):,} ‡∏ö‡∏≤‡∏ó</p>
        <div>
            <span class="tag">{item['‡∏Å‡∏•‡∏∏‡πà‡∏°']}</span>
            <span class="tag">{item['‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö']}</span>
            <span class="tag">{item['‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥']}</span>
        </div>
    </div>
    """, unsafe_allow_html=True)

st.markdown("</div>", unsafe_allow_html=True)
